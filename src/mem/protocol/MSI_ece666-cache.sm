/*
 * Copyright (c) 2009-2012 Mark D. Hill and David A. Wood
 * Copyright (c) 2010-2012 Advanced Micro Devices, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

machine(L1Cache, "MSI ece666 L1 Cache")
    : Sequencer * sequencer;
      CacheMemory * cacheMemory;
      Cycles cache_response_latency := 12;
      Cycles issue_latency := 2;
      bool send_evictions;

      // NETWORK BUFFERS
      MessageBuffer * requestFromCache, network="To", virtual_network="2",
            ordered="true", vnet_type="request";
      MessageBuffer * responseFromCache, network="To", virtual_network="4",
            ordered="true", vnet_type="response";

      MessageBuffer * forwardToCache, network="From", virtual_network="3",
            ordered="true", vnet_type="forward";
      MessageBuffer * responseToCache, network="From", virtual_network="4",
            ordered="true", vnet_type="response";
      MessageBuffer * responseToCacheCtrl, network="From", virtual_network="5",
            ordered="true", vnet_type="request";
      
{
  // STATES
  state_declaration(State, desc="Cache states") {
    I, AccessPermission:Invalid, desc="Not Present/Invalid";
    S, AccessPermission:Read_Only, desc="Shared";
    M, AccessPermission:Read_Write, desc="Modified";

    IM_AC, AccessPermission:Busy, desc="Intermediate I->, wait for ack count from dir";
    IM_AD, AccessPermission:Busy, desc="Intermediate I->M, wait for ack and data";
    IM_A, AccessPermission:Busy, desc="Intermediate I->M, wait for acks";

    IS_D, AccessPermission:Busy, desc="Intermediate I->S, wait for data";
  
    SM_AC, AccessPermission:Busy, desc="Intermediate S->M, wait for ack count from dir";
    SM_AD, AccessPermission:Busy, desc="Intermediate S->M, wait for ack and data";
    SM_A, AccessPermission:Busy, desc="Intermediate S->M, wait for ack";

    MI_A, AccessPermission:Busy, desc="Intermediate M->I, wait for PUT ack";

    SI_A, AccessPermission:Busy, desc="Intermediate S->I, wait for PUT ack";

  }

  // EVENTS
  enumeration(Event, desc="Cache events") {
    // From processor

    Load,       desc="Load request from processor";
    Ifetch,     desc="Ifetch request from processor";
    Store,      desc="Store request from processor";

    Data_A0,       desc="Data from dir, Expected Acks = 0";
    Data_AGT0,       desc="Data from dir, Expected Acks > 0";
    Data_Owner, desc="Data Received from Owner";

    Fwd_GETX,   desc="Forward from network";
    Fwd_GETS,   desc="Forward from network";

    Inv,        desc="Invalidate request from dir";
    Replacement,  desc="Replace a block";

    Put_Ack,   desc="Ack from the directory for a writeback";
    Inv_Ack,    desc="Invalidation ack from node with block";
    Last_Inv_Ack,  desc="Final Invalidation ack from nodes";
    Dir_Rsp,    desc="Directory responsds to request with number of acks needed";
  }

  // STRUCTURE DEFINITIONS

  MessageBuffer mandatoryQueue, ordered="false";

  // CacheEntry
  structure(Entry, desc="...", interface="AbstractCacheEntry") {
    State CacheState,        desc="cache state";
    bool Dirty,              desc="Is the data dirty (different than memory)?";
    DataBlock DataBlk,       desc="Data in the block";
  }

  // TBE fields
  structure(TBE, desc="...") {
    State TBEState,          desc="Transient state";
    DataBlock DataBlk,       desc="data for the block, required for concurrent writebacks";
    int   acksLeft,           desc="Remaining Acks for transitions";
  }

  structure(TBETable, external="yes") {
    TBE lookup(Address);
    void allocate(Address);
    void deallocate(Address);
    bool isPresent(Address);
  }


  // STRUCTURES
  TBETable TBEs, template="<L1Cache_TBE>", constructor="m_number_of_TBEs";

  // PROTOTYPES
  void set_cache_entry(AbstractCacheEntry a);
  void unset_cache_entry();
  void set_tbe(TBE b);
  void unset_tbe();
  void profileMsgDelay(int virtualNetworkType, Cycles b);

  Entry getCacheEntry(Address address), return_by_pointer="yes" {
    return static_cast(Entry, "pointer", cacheMemory.lookup(address));
  }

  // FUNCTIONS
  Event mandatory_request_type_to_event(RubyRequestType type) {
   if (type == RubyRequestType:LD) {
      return Event:Load;
    } else if (type == RubyRequestType:IFETCH) {
      return Event:Ifetch;
    } else if ((type == RubyRequestType:ST) || (type == RubyRequestType:ATOMIC)) {
      return Event:Store;
    } else {
      error("Invalid RubyRequestType");
    }
  }

  State getState(TBE tbe, Entry cache_entry, Address addr) {

    if (is_valid(tbe)) {
      return tbe.TBEState;
    }
    else if (is_valid(cache_entry)) {
      return cache_entry.CacheState;
    }
    else {
      return State:I;
    }
  }

  void setState(TBE tbe, Entry cache_entry, Address addr, State state) {

    if (is_valid(tbe)) {
      tbe.TBEState := state;
    }

    if (is_valid(cache_entry)) {
      cache_entry.CacheState := state;
    }
  }

  AccessPermission getAccessPermission(Address addr) {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      return L1Cache_State_to_permission(tbe.TBEState);
    }

    Entry cache_entry := getCacheEntry(addr);
    if(is_valid(cache_entry)) {
      return L1Cache_State_to_permission(cache_entry.CacheState);
    }

    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Entry cache_entry, Address addr, State state) {
    if (is_valid(cache_entry)) {
      cache_entry.changePermission(L1Cache_State_to_permission(state));
    }
  }

  void functionalRead(Address addr, Packet *pkt) {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      testAndRead(addr, tbe.DataBlk, pkt);
    } else {
      testAndRead(addr, getCacheEntry(addr).DataBlk, pkt);
    }
  }

  int functionalWrite(Address addr, Packet *pkt) {
    int num_functional_writes := 0;

    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      num_functional_writes := num_functional_writes +
        testAndWrite(addr, tbe.DataBlk, pkt);
      return num_functional_writes;
    }

    num_functional_writes := num_functional_writes +
        testAndWrite(addr, getCacheEntry(addr).DataBlk, pkt);
    return num_functional_writes;
  }

  // NETWORK PORTS

  out_port(requestNetwork_out, RequestMsg, requestFromCache);
  out_port(responseNetwork_out, ResponseMsg, responseFromCache);

  in_port(responseCtrlNetwork_in, RequestMsg, responseToCacheCtrl) {
    if(responseCtrlNetwork_in.isReady()) {
      peek(responseCtrlNetwork_in, RequestMsg, block_on="Addr") {

        Entry cache_entry := getCacheEntry(in_msg.Addr);
        TBE tbe := TBEs[in_msg.Addr];

        DPRINTF(RubySlicc, "CtrlNetwork Request got msg %s for addr %s \n", in_msg.Type, in_msg.Addr);

        if (in_msg.Type == CoherenceRequestType:DIR_RSP) {
          trigger(Event:Dir_Rsp, in_msg.Addr, cache_entry, tbe);
        }
        else {
          error("Unexpected message");
        }
      }
    }
  }

  in_port(forwardRequestNetwork_in, RequestMsg, forwardToCache) {
    if (forwardRequestNetwork_in.isReady()) {
      peek(forwardRequestNetwork_in, RequestMsg, block_on="Addr") {

        Entry cache_entry := getCacheEntry(in_msg.Addr);
        TBE tbe := TBEs[in_msg.Addr];

        DPRINTF(RubySlicc, "Forward Request got msg %s for addr %s machine %s\n", in_msg.Type, in_msg.Addr, machineID);

        if (in_msg.Type == CoherenceRequestType:GETX) {
          trigger(Event:Fwd_GETX, in_msg.Addr, cache_entry, tbe);
        }
        else if (in_msg.Type == CoherenceRequestType:GETS) {
          trigger(Event:Fwd_GETS, in_msg.Addr, cache_entry, tbe);
        }
        else if (in_msg.Type == CoherenceRequestType:INV) {
          trigger(Event:Inv, in_msg.Addr, cache_entry, tbe);
        }
        else {
          error("Unexpected message");
        }
      }
    }
  }

  in_port(responseNetwork_in, ResponseMsg, responseToCache) {
    if (responseNetwork_in.isReady()) {
      peek(responseNetwork_in, ResponseMsg, block_on="Addr") {

        Entry cache_entry := getCacheEntry(in_msg.Addr);
        TBE tbe := TBEs[in_msg.Addr];

        DPRINTF(RubySlicc, "ResponseNetwork Request got msg %s for addr %s machine %s\n", in_msg.Type, in_msg.Addr, machineID);

        if (in_msg.Type == CoherenceResponseType:DATA) {
          if(tbe.acksLeft == 0) {
            trigger(Event:Data_A0, in_msg.Addr, cache_entry, tbe);
          }
          else {
            trigger(Event:Data_AGT0, in_msg.Addr, cache_entry, tbe);
          }
        }
        else if (in_msg.Type == CoherenceResponseType:FWD_DATA) {
          trigger(Event:Data_Owner, in_msg.Addr, cache_entry, tbe);
        }
        else if (in_msg.Type == CoherenceResponseType:PUT_ACK) {
          trigger(Event:Put_Ack, in_msg.Addr, cache_entry, tbe);
        }
        else if (in_msg.Type == CoherenceResponseType:INV_ACK) {
          if(tbe.acksLeft == 1) {
            trigger(Event:Last_Inv_Ack, in_msg.Addr, cache_entry, tbe);
          }
          else {
            trigger(Event:Inv_Ack, in_msg.Addr, cache_entry, tbe);
          }
        }
        else {
          error("Unexpected message");
        }
      }
    }
  }

    // Mandatory Queue
  in_port(mandatoryQueue_in, RubyRequest, mandatoryQueue, desc="...") {
    if (mandatoryQueue_in.isReady()) {
      peek(mandatoryQueue_in, RubyRequest, block_on="LineAddress") {

        DPRINTF(RubySlicc, "Mandatory Request got msg %s for addr %s machine %s\n", in_msg.Type, in_msg.LineAddress, machineID);
        
        Entry cache_entry := getCacheEntry(in_msg.LineAddress);
        if (is_invalid(cache_entry) &&
            cacheMemory.cacheAvail(in_msg.LineAddress) == false ) {
          // make room for the block
          trigger(Event:Replacement, cacheMemory.cacheProbe(in_msg.LineAddress),
                  getCacheEntry(cacheMemory.cacheProbe(in_msg.LineAddress)),
                  TBEs[cacheMemory.cacheProbe(in_msg.LineAddress)]);
        }
        else {
          trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.LineAddress,
                  cache_entry, TBEs[in_msg.LineAddress]);
        }
      }
    }
  }

  // ACTIONS
  action(e_sendData, "e", desc="Send data from cache to requestor") {
    peek(forwardRequestNetwork_in, RequestMsg) {
      if(in_msg.Requestor != map_Address_to_Directory(address)) { //data already being sent to dir
        enqueue(responseNetwork_out, ResponseMsg, cache_response_latency) {
          assert(is_valid(cache_entry));
          out_msg.Addr := address;
          out_msg.Type := CoherenceResponseType:FWD_DATA;
          out_msg.Sender := machineID;
          out_msg.Destination.add(in_msg.Requestor);
          out_msg.DataBlk := cache_entry.DataBlk;
          out_msg.MessageSize := MessageSizeType:Response_Data;
        }
      }
    }
  }

  action(ee_sendDataFromTBE, "\e", desc="Send data from TBE to requestor") {
    peek(forwardRequestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, cache_response_latency) {
        assert(is_valid(tbe));
        out_msg.Addr := address;
        out_msg.Type := CoherenceResponseType:FWD_DATA;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.DataBlk := tbe.DataBlk;
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(i_allocateL1CacheBlock, "i", desc="Allocate a cache block") {
    if (is_valid(cache_entry)) {
    } else {
      set_cache_entry(cacheMemory.allocate(address, new Entry));
    }
  }

  action(h_deallocateL1CacheBlock, "h", desc="deallocate a cache block") {
    if (is_valid(cache_entry)) {
      cacheMemory.deallocate(address);
      unset_cache_entry();
    }
  }

  action(m_popMandatoryQueue, "m", desc="Pop the mandatory request queue") {
    mandatoryQueue_in.dequeue();
  }

  action(n_popResponseQueue, "n", desc="Pop the response queue") {
    profileMsgDelay(1, responseNetwork_in.dequeue());
  }

  action(o_popForwardedRequestQueue, "o", desc="Pop the forwarded request queue") {
    profileMsgDelay(2, forwardRequestNetwork_in.dequeue());
  }

  action(d_popCtrlRequestQueue, "d", desc="Pop the control request queue") {
    profileMsgDelay(2, responseCtrlNetwork_in.dequeue());
  }

  action(p_profileMiss, "pi", desc="Profile cache miss") {
      ++cacheMemory.demand_misses;
  }

  action(p_profileHit, "ph", desc="Profile cache hit") {
      ++cacheMemory.demand_hits;
  }

  action(r_load_hit, "r", desc="Notify sequencer the load completed.") {
    assert(is_valid(cache_entry));
    sequencer.readCallback(address, cache_entry.DataBlk, false);
  }

  action(rx_load_hit, "rx", desc="External load completed.") {
    peek(responseNetwork_in, ResponseMsg) {
      assert(is_valid(cache_entry));
      sequencer.readCallback(address, cache_entry.DataBlk, true,
                             machineIDToMachineType(in_msg.Sender));
    }
  }

  action(s_store_hit, "s", desc="Notify sequencer that store completed.") {
    assert(is_valid(cache_entry));
    sequencer.writeCallback(address, cache_entry.DataBlk, false);
  }

  action(sx_store_hit, "sx", desc="External store completed.") {
    peek(responseNetwork_in, ResponseMsg) {
      assert(is_valid(cache_entry));
      DPRINTF(RubySlicc,"%s\n", cache_entry.DataBlk);
      sequencer.writeCallback(address, cache_entry.DataBlk, true,
                              machineIDToMachineType(in_msg.Sender));
    }
  }

  action(u_writeDataToCache, "u", desc="Write data to the cache") {
    peek(responseNetwork_in, ResponseMsg) {
      assert(is_valid(cache_entry));
      cache_entry.DataBlk := in_msg.DataBlk;
    }
  }

  action(forward_eviction_to_cpu, "\cc", desc="sends eviction information to the processor") {
    if (send_evictions) {
      sequencer.evictionCallback(address);
    }
  }

  action(v_allocateTBE, "v", desc="Allocate TBE") {
    TBEs.allocate(address);
    set_tbe(TBEs[address]);
    tbe.acksLeft := 0;
  }

  action(w_deallocateTBE, "w", desc="Deallocate TBE") {
    TBEs.deallocate(address);
    unset_tbe();
  }

  action(x_copyDataFromCacheToTBE, "x", desc="Copy data from cache to TBE") {
    assert(is_valid(cache_entry));
    assert(is_valid(tbe));
    tbe.DataBlk := cache_entry.DataBlk;
  }



  action(z_stall, "z", desc="stall") {
    // do nothing
  }


  //ECE 666 Actions
  
  action(dac_decrementAckCnt, "dac", desc="Decrements the Ack Count") {
    peek(responseNetwork_in, ResponseMsg) {
      tbe.acksLeft := tbe.acksLeft - 1;
    } 
  }

  action(sac_setAckCnt, "sac", desc="Sets the ack count from the directories response") {
    peek(responseCtrlNetwork_in, RequestMsg) {
      tbe.acksLeft := in_msg.expectedAcks;
    }
  }

  action(i_issuePUTS, "ips", desc="Issue PUTS request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
    out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:PUTS;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(i_issueGETX, "igx", desc="Issue GETX request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
    out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:GETX;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(i_issueGETS, "igs", desc="Issue GETS request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
    out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:GETS;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.MessageSize := MessageSizeType:Control;
    }
  }

  action(i_issuePUTX, "ipx", desc="Issue a PUTX request") {
    enqueue(requestNetwork_out, RequestMsg, issue_latency) {
      assert(is_valid(cache_entry));
      out_msg.Addr := address;
      out_msg.Type := CoherenceRequestType:PUTX;
      out_msg.Requestor := machineID;
      out_msg.Destination.add(map_Address_to_Directory(address));
      out_msg.DataBlk := cache_entry.DataBlk;
      out_msg.MessageSize := MessageSizeType:Data;
    }
  }

  action(si_sendInvalidationAck, "si", desc="Send Inv Ack to Requestor") {
    peek(forwardRequestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, 1) {
        out_msg.Addr := address;
        out_msg.Type := CoherenceResponseType:INV_ACK;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(ed_sendDataDir, "ed", desc="Send data from cache to dir") {
    peek(forwardRequestNetwork_in, RequestMsg) {
      enqueue(requestNetwork_out, RequestMsg, issue_latency) {
        assert(is_valid(cache_entry));
        out_msg.Addr := address;
        out_msg.Type := CoherenceRequestType:DATA;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.MessageSize := MessageSizeType:Data;
      }
    }
  }

  action(etd_sendDataDir, "etd", desc="Send data from tbe to dir") {
    peek(forwardRequestNetwork_in, RequestMsg) {
      enqueue(requestNetwork_out, RequestMsg, issue_latency) {
        out_msg.Addr := address;
        out_msg.Type := CoherenceRequestType:DATA;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.DataBlk := tbe.DataBlk;
        out_msg.MessageSize := MessageSizeType:Data;
      }
    }
  }

  // TRANSITIONS
  
  //stall transitions:
  transition({IM_AC, IM_AD, IM_A, SM_AC, SM_AD, SM_A,  SI_A}, {Fwd_GETX, Fwd_GETS, Load, Ifetch, Store, Replacement}) {
    z_stall;
  }
  transition({MI_A}, {Load, Ifetch, Store, Replacement}) {
    z_stall;
  }

  transition({SM_AC, IM_AC}, {Inv_Ack, Last_Inv_Ack}) {
    z_stall;
  }

  transition({SM_AD, IM_AD}, {Inv_Ack, Last_Inv_Ack}) {
    dac_decrementAckCnt;
    n_popResponseQueue;
  }

  transition(IS_D, Inv) {
    z_stall;
  }

  transition({IM_AC, SM_AC} , {Data_A0, Data_AGT0, Data_Owner}) {
    z_stall;
  }
  
  transition(IS_D, Replacement) {
    z_stall;
  }

  //cache hit transitions:
  transition({M,S}, {Load, Ifetch}) {
    //read hit
    r_load_hit;
    p_profileHit;
    m_popMandatoryQueue;
  }

  transition(M, Store) {
    //write hit
    s_store_hit;
    p_profileHit;
    m_popMandatoryQueue;
  }

  //INVALID

  transition(I, {Load, Ifetch}, IS_D) {
    //Send GETS
    //move to shared, wait for data from dir or owner
    v_allocateTBE;
    i_allocateL1CacheBlock;
    i_issueGETS;
    p_profileMiss;
    m_popMandatoryQueue;
  }  

  transition(IS_D, {Data_A0, Data_Owner}, S) {
    //copy data to cache , make sure DataA0 and DataOwner come from same queues
    u_writeDataToCache;
    rx_load_hit;
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(I, Store, IM_AC) {
    //get expected ack count
    v_allocateTBE;
    i_allocateL1CacheBlock;
    p_profileMiss;
    i_issueGETX;
    m_popMandatoryQueue;
  }
    
  transition(IM_AC, Dir_Rsp, IM_AD) {
    //got expected acks, get data
    sac_setAckCnt;
    d_popCtrlRequestQueue;
  }

  transition({IM_AD, SM_AD}, Data_A0, M) {
    //got data from dir and ownership
    u_writeDataToCache;
    sx_store_hit;
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(IM_AD, Data_AGT0, IM_A) {
    //got data, wait for acks
    u_writeDataToCache;
    sx_store_hit;
    n_popResponseQueue;
  }
  
  transition(IM_AD, Data_Owner, M) {
    //got data from owner, go to M
    u_writeDataToCache;
    sx_store_hit;
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(IM_A, Last_Inv_Ack, M) {
    //got all Acks, go to M
    w_deallocateTBE;
    n_popResponseQueue;
  } 

  //SHARED
  
  transition(S, Store, SM_AC) {
    //Send GETX
    //Go to wait for ack count
    v_allocateTBE;
    p_profileMiss;
    i_issueGETX;
    m_popMandatoryQueue;
  }

  transition(SM_AC, Dir_Rsp, SM_AD) {
    //receive number of expected acks from dir
    sac_setAckCnt;
    d_popCtrlRequestQueue;
  }

  transition(SM_AD, Data_AGT0, SM_A) {
    //received data, now look for acks
    u_writeDataToCache;
    sx_store_hit;
    n_popResponseQueue;
  }

  transition({IM_A, SM_A}, Inv_Ack) {
    //decrement the expected ack count
    dac_decrementAckCnt;
    n_popResponseQueue;
  }

  transition(SM_A, Last_Inv_Ack, M) {
    //received last ack, can go to modified
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(S, Replacement, SI_A) {
    //send PUTS request
    i_issuePUTS;
    v_allocateTBE;
    h_deallocateL1CacheBlock;
    forward_eviction_to_cpu;
  }

  transition(SI_A , Put_Ack, I) {
    //Dir acked requested transition
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(SI_A, Inv, I) {
    //send invalidation ACK to requestor
    si_sendInvalidationAck;
    w_deallocateTBE;
    o_popForwardedRequestQueue;
  }

  transition(S, Inv, I) {
    //send invalidation ACK to requestor
    si_sendInvalidationAck;
    h_deallocateL1CacheBlock;
    forward_eviction_to_cpu;
    o_popForwardedRequestQueue;
  }

  transition(SM_AD, Inv, IM_AD) {
    //send invalidation ACK to requestor
    si_sendInvalidationAck;
    o_popForwardedRequestQueue;
  }

  transition(SM_AC, Inv, IM_AC) {
    //send invalidation ACK to requestor
    si_sendInvalidationAck;
    o_popForwardedRequestQueue;
  }

  //MODIFIED
  
  transition(M, Replacement, MI_A) {
    //Send PUTX & data to dir
    //Copy data to tbe
    //dealloc cache block
    i_issuePUTX;
    v_allocateTBE;
    x_copyDataFromCacheToTBE;
    h_deallocateL1CacheBlock;
    forward_eviction_to_cpu;
  }

  transition(MI_A, Put_Ack, I) {
    //Dir acked PUT request
    w_deallocateTBE;
    n_popResponseQueue;
  }

  transition(MI_A, Fwd_GETX, I) {
    //Send Data to Requestor from tbe, go to wait for PUT ack
    ee_sendDataFromTBE;
    w_deallocateTBE;
    o_popForwardedRequestQueue;
  }

  transition(MI_A, Fwd_GETS, SI_A) {
    //Go wait for inv or put ack, if receive put ack, our messge got to dir first
    ee_sendDataFromTBE;
    etd_sendDataDir;
    o_popForwardedRequestQueue;
  }

  transition(M, Fwd_GETX, I) {
    //send data to requestor
    //dealloc cache block
    e_sendData;
    h_deallocateL1CacheBlock;
    forward_eviction_to_cpu;
    o_popForwardedRequestQueue;
  }

  transition(M, Fwd_GETS, S) {
    //send data to requestor and dir
    e_sendData;
    ed_sendDataDir;
    o_popForwardedRequestQueue;
  }

  transition(M, Inv, I) { //this only happens on DMA Write
    //send data to dir
    ed_sendDataDir;
    o_popForwardedRequestQueue;
  }
}
